jobs:
- name: backup
  serial: true
  plan:

  - in_parallel:
      steps:
        - get: bbr-cli
        - get: bosh-cli
        - get: ci
        - get: midnight
          trigger: true
        - get: ubuntu-image

  - task: backup-prod-env
    attempts: 3
    image: ubuntu-image
    params: &bosh-params
      BOSH_CA_CERT: ((bosh_ca_cert))
      BOSH_CLIENT: ((bosh_client.id))
      BOSH_CLIENT_SECRET: ((bosh_client.secret))
      BOSH_DEPLOYMENT: concourse-prod
      BOSH_ENVIRONMENT: ((bosh_target))
    file: ci/tasks/bbr-backup.yml

  - put: backup-tarball
    inputs: [bbr_artifacts]
    params:
      file: bbr_artifacts/bbr_backup.tar


- name: restore
  serial: true
  plan:

  - in_parallel:
      steps:
      - get: backup-tarball
        passed: [backup]
        trigger: true
      - get: ubuntu-image
      - get: ci
      - get: bbr-cli
      - get: bosh-cli
      - get: cbd

  - task: generate-dynamic-ops-files
    image: ubuntu-image
    file: ci/tasks/bbr-generate-ops-files.yml

  - put: deploy-db
    inputs: &deploy-inputs
      - cbd
      - ci
      - ops-files
    resource: deployment
    params:
      manifest: cbd/cluster/concourse.yml
      ops_files: &deploy-ops-files
      - cbd/cluster/operations/backup-atc.yml
      - cbd/cluster/operations/scale.yml
      - cbd/cluster/operations/basic-auth.yml
      - ops-files/prod-version.yml
      - ci/deployments/prod-restore.yml
      vars_files: [cbd/versions.yml]
      vars: &deploy-vars
        db_persistent_disk_type: large
        db_vm_type: test
        deployment_name: test-restore
        external_url: http://localhost:8080
        local_user.password: admin
        local_user.username: admin
        network_name: private
        web_instances: 0
        web_vm_type: test
        worker_instances: 0
        worker_vm_type: test

  - task: restore
    image: ubuntu-image
    file: ci/tasks/bbr-restore.yml
    params:
      <<: *bosh-params
      BOSH_DEPLOYMENT: test-restore

  - put: deploy-all
    inputs: *deploy-inputs
    resource: deployment
    params:
      manifest: cbd/cluster/concourse.yml
      ops_files: *deploy-ops-files
      vars_files: [cbd/versions.yml]
      vars:
        <<: *deploy-vars
        web_instances: 1
        worker_instances: 1

  - task: trigger-existing-pipeline
    image: ubuntu-image
    file: ci/tasks/bbr-trigger-existing-pipeline.yml
    params:
      <<: *bosh-params
      BOSH_DEPLOYMENT: test-restore

  ensure:
    put: delete-deployment
    resource: deployment
    inputs: []
    params:
      delete:
        enabled: true
        force: true



resources:
- name: midnight
  type: time
  source:
    location: America/Toronto
    start: 1:00 AM
    stop: 2:00 AM

- name: backup-tarball
  type: gcs-resource
  source:
    bucket: concourse-prod-backup
    json_key: ((backups_bucket_json_key))
    versioned_file: prod-db-backup.tar

- name: ubuntu-image
  type: registry-image
  check_every: 1h
  source: { repository: ubuntu, tag: bionic }

- name: bbr-cli
  type: github-release
  source:
    access_token: ((concourse_github_release.access_token))
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore

- name: bosh-cli
  type: github-release
  source:
    access_token: ((concourse_github_release.access_token))
    owner: cloudfoundry
    repository: bosh-cli

- name: cbd
  type: git
  source:
    uri: https://github.com/concourse/concourse-bosh-deployment

- name: ci
  type: git
  source:
    uri: https://github.com/concourse/ci.git
    branch: test-restore

- name: deployment
  type: bosh-deployment
  source:
    target: ((bosh_target))
    client: ((bosh_client.id))
    client_secret: ((bosh_client.secret))
    deployment: test-restore




resource_types:
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: bosh-deployment
  type: registry-image
  source: {repository: cloudfoundry/bosh-deployment-resource}

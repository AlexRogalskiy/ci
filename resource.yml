groups:
- name: main
  jobs:
  - prs-*[!s]
  - build-*[!s]
  - scan-*[!s]
  - publish-*[!s]
- name: republish
  jobs:
  - republish-*
- name: lts
  jobs:
  - build-*-lts
  - scan-*-lts
  - publish-*-lts
jobs:
- name: build-alpine
  on_failure:
    put: notify
    params:
      mode: normal
      alert_type: failed
  plan:
  - in_parallel:
    - get: daily-trigger
      trigger: true
    - get: git-resource
      resource: resource-repo
      trigger: true
    - get: alpine
      trigger: true
      params:
        format: oci
    - get: golang-builder
      trigger: true
      params:
        format: oci
    - get: oci-build-task
  - task: build
    privileged: true
    image: oci-build-task
    config:
      platform: linux
      inputs:
      - name: git-resource
      - name: alpine
      - name: golang-builder
      outputs:
      - name: built-resource-image
        path: image
      params:
        DOCKERFILE: git-resource/dockerfiles/alpine/Dockerfile
        ADDITIONAL_TARGETS: tests
        IMAGE_ARG_base_image: alpine/image.tar
        IMAGE_ARG_builder_image: golang-builder/image.tar
        CONTEXT: git-resource
      run:
        path: build
  - put: resource-image-dev-alpine
    params:
      image: built-resource-image/image.tar
- name: build-ubuntu
  on_failure:
    put: notify
    params:
      mode: normal
      alert_type: failed
  plan:
  - in_parallel:
    - get: daily-trigger
      trigger: true
    - get: git-resource
      resource: resource-repo
      trigger: true
    - get: ubuntu-bionic
      trigger: true
      params:
        format: oci
    - get: golang-builder
      trigger: true
      params:
        format: oci
    - get: oci-build-task
  - task: build
    privileged: true
    image: oci-build-task
    config:
      platform: linux
      inputs:
      - name: git-resource
      - name: ubuntu-bionic
      - name: golang-builder
      outputs:
      - name: built-resource-image
        path: image
      params:
        DOCKERFILE: git-resource/dockerfiles/ubuntu/Dockerfile
        ADDITIONAL_TARGETS: tests
        IMAGE_ARG_base_image: ubuntu-bionic/image.tar
        IMAGE_ARG_builder_image: golang-builder/image.tar
        CONTEXT: git-resource
      run:
        path: build
  - put: resource-image-dev-ubuntu
    params:
      image: built-resource-image/image.tar
- name: build-alpine-lts
  on_failure:
    put: notify
    params:
      mode: normal
      alert_type: failed
  plan:
  - in_parallel:
    - get: daily-trigger
      trigger: true
    - get: git-resource
      resource: resource-repo-lts
      trigger: true
    - get: alpine
      trigger: true
      params:
        format: oci
    - get: golang-builder
      trigger: true
      params:
        format: oci
    - get: oci-build-task
  - task: build
    privileged: true
    image: oci-build-task
    config:
      platform: linux
      inputs:
      - name: git-resource
      - name: alpine
      - name: golang-builder
      outputs:
      - name: built-resource-image
        path: image
      params:
        DOCKERFILE: git-resource/dockerfiles/alpine/Dockerfile
        ADDITIONAL_TARGETS: tests
        IMAGE_ARG_base_image: alpine/image.tar
        IMAGE_ARG_builder_image: golang-builder/image.tar
        CONTEXT: git-resource
      run:
        path: build
  - put: resource-image-dev-alpine-lts
    params:
      image: built-resource-image/image.tar
- name: build-ubuntu-lts
  on_failure:
    put: notify
    params:
      mode: normal
      alert_type: failed
  plan:
  - in_parallel:
    - get: daily-trigger
      trigger: true
    - get: git-resource
      resource: resource-repo-lts
      trigger: true
    - get: ubuntu-bionic
      trigger: true
      params:
        format: oci
    - get: golang-builder
      trigger: true
      params:
        format: oci
    - get: oci-build-task
  - task: build
    privileged: true
    image: oci-build-task
    config:
      platform: linux
      inputs:
      - name: git-resource
      - name: ubuntu-bionic
      - name: golang-builder
      outputs:
      - name: built-resource-image
        path: image
      params:
        DOCKERFILE: git-resource/dockerfiles/ubuntu/Dockerfile
        ADDITIONAL_TARGETS: tests
        IMAGE_ARG_base_image: ubuntu-bionic/image.tar
        IMAGE_ARG_builder_image: golang-builder/image.tar
        CONTEXT: git-resource
      run:
        path: build
  - put: resource-image-dev-ubuntu-lts
    params:
      image: built-resource-image/image.tar
- name: scan-image
  on_failure:
    put: notify
    params:
      mode: normal
      alert_type: failed
  plan:
  - in_parallel:
    - get: resource-repo
      resource: resource-repo
      passed:
      - build-alpine
      - build-ubuntu
    - get: resource-image-dev-alpine
      resource: resource-image-dev-alpine
      passed:
      - build-alpine
      params:
        format: oci
      trigger: true
    - get: resource-image-dev-ubuntu
      resource: resource-image-dev-ubuntu
      passed:
      - build-ubuntu
      params:
        format: oci
      trigger: true
    - get: trivy
      trigger: true
    - get: trivy-db
      trigger: true
      params:
        globs:
        - trivy-offline.db.tgz
  - try:
      in_parallel:
      - task: scan-alpine
        image: trivy
        config:
          platform: linux
          inputs:
          - name: resource-image-dev-alpine
            path: image
          - name: trivy-db
          run:
            path: sh
            args:
            - -c
            - |
              mkdir db
              tar -xzf trivy-db/trivy-offline.db.tgz -C ./db

              trivy \
                --cache-dir $(pwd) \
                image \
                --severity "HIGH,CRITICAL" \
                --ignore-unfixed \
                --exit-code 1 \
                --input image/image.tar
      - task: scan-ubuntu
        image: trivy
        config:
          platform: linux
          inputs:
          - name: resource-image-dev-ubuntu
            path: image
          - name: trivy-db
          run:
            path: sh
            args:
            - -c
            - |
              mkdir db
              tar -xzf trivy-db/trivy-offline.db.tgz -C ./db

              trivy \
                --cache-dir $(pwd) \
                image \
                --severity "HIGH,CRITICAL" \
                --ignore-unfixed \
                --exit-code 1 \
                --input image/image.tar
      on_failure:
        put: notify
        params:
          mode: normal
          alert_type: failed
      on_error:
        put: notify
        params:
          mode: normal
          alert_type: failed
- name: scan-image-lts
  on_failure:
    put: notify
    params:
      mode: normal
      alert_type: failed
  plan:
  - in_parallel:
    - get: resource-repo
      resource: resource-repo-lts
      passed:
      - build-alpine-lts
      - build-ubuntu-lts
    - get: resource-image-dev-alpine
      resource: resource-image-dev-alpine-lts
      passed:
      - build-alpine-lts
      params:
        format: oci
      trigger: true
    - get: resource-image-dev-ubuntu
      resource: resource-image-dev-ubuntu-lts
      passed:
      - build-ubuntu-lts
      params:
        format: oci
      trigger: true
    - get: trivy
      trigger: true
    - get: trivy-db
      trigger: true
      params:
        globs:
        - trivy-offline.db.tgz
  - try:
      in_parallel:
      - task: scan-alpine
        image: trivy
        config:
          platform: linux
          inputs:
          - name: resource-image-dev-alpine
            path: image
          - name: trivy-db
          run:
            path: sh
            args:
            - -c
            - |
              mkdir db
              tar -xzf trivy-db/trivy-offline.db.tgz -C ./db

              trivy \
                --cache-dir $(pwd) \
                image \
                --severity "HIGH,CRITICAL" \
                --ignore-unfixed \
                --exit-code 1 \
                --input image/image.tar
      - task: scan-ubuntu
        image: trivy
        config:
          platform: linux
          inputs:
          - name: resource-image-dev-ubuntu
            path: image
          - name: trivy-db
          run:
            path: sh
            args:
            - -c
            - |
              mkdir db
              tar -xzf trivy-db/trivy-offline.db.tgz -C ./db

              trivy \
                --cache-dir $(pwd) \
                image \
                --severity "HIGH,CRITICAL" \
                --ignore-unfixed \
                --exit-code 1 \
                --input image/image.tar
      on_failure:
        put: notify
        params:
          mode: normal
          alert_type: failed
      on_error:
        put: notify
        params:
          mode: normal
          alert_type: failed
- name: prs-alpine
  public: true
  serial: true
  serial_groups:
  - validate
  plan:
  - in_parallel:
    - get: resource-pr
      trigger: true
      version: every
    - get: alpine
      trigger: true
      params:
        format: oci
    - get: oci-build-task
    - get: golang-builder
      params:
        format: oci
  - put: git-resource
    resource: resource-pr
    params:
      context: status-alpine
      path: resource-pr
      status: pending
  - do:
    - task: build
      privileged: true
      image: oci-build-task
      config:
        platform: linux
        inputs:
        - name: git-resource
        - name: alpine
        - name: golang-builder
        outputs:
        - name: built-resource-image
          path: image
        params:
          DOCKERFILE: git-resource/dockerfiles/alpine/Dockerfile
          ADDITIONAL_TARGETS: tests
          IMAGE_ARG_base_image: alpine/image.tar
          IMAGE_ARG_builder_image: golang-builder/image.tar
          CONTEXT: git-resource
        run:
          path: build
    on_failure:
      put: resource-pr
      params:
        context: status-alpine
        path: resource-pr
        status: failure
    on_success:
      put: resource-pr
      params:
        context: status-alpine
        path: resource-pr
        status: success
- name: prs-ubuntu
  public: true
  serial: true
  serial_groups:
  - validate
  plan:
  - in_parallel:
    - get: resource-pr
      trigger: true
      version: every
    - get: ubuntu-bionic
      trigger: true
      params:
        format: oci
    - get: oci-build-task
    - get: golang-builder
      params:
        format: oci
  - put: git-resource
    resource: resource-pr
    params:
      context: status-ubuntu
      path: resource-pr
      status: pending
  - do:
    - task: build
      privileged: true
      image: oci-build-task
      config:
        platform: linux
        inputs:
        - name: git-resource
        - name: ubuntu-bionic
        - name: golang-builder
        outputs:
        - name: built-resource-image
          path: image
        params:
          DOCKERFILE: git-resource/dockerfiles/ubuntu/Dockerfile
          ADDITIONAL_TARGETS: tests
          IMAGE_ARG_base_image: ubuntu-bionic/image.tar
          IMAGE_ARG_builder_image: golang-builder/image.tar
          CONTEXT: git-resource
        run:
          path: build
    on_failure:
      put: resource-pr
      params:
        context: status-ubuntu
        path: resource-pr
        status: failure
    on_success:
      put: resource-pr
      params:
        context: status-ubuntu
        path: resource-pr
        status: success
- name: publish-major
  plan:
  - in_parallel:
    - get: resource-repo
      resource: resource-repo
      passed:
      - scan-image
    - get: ci
    - get: release-me
    - get: resource-image-dev-alpine
      resource: resource-image-dev-alpine
      passed:
      - scan-image
      params:
        format: oci
    - get: resource-image-dev-alpine-rootfs
      resource: resource-image-dev-alpine
      passed:
      - scan-image
      params:
        format: rootfs
    - get: resource-image-dev-ubuntu
      resource: resource-image-dev-ubuntu
      passed:
      - scan-image
      params:
        format: oci
    - get: resource-image-dev-ubuntu-rootfs
      resource: resource-image-dev-ubuntu
      passed:
      - scan-image
      params:
        format: rootfs
    - get: version
      resource: version
      params:
        bump: major
  - task: create-release
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: ubuntu
      inputs:
      - name: version
      - name: resource-image-dev-alpine-rootfs
      - name: resource-image-dev-ubuntu-rootfs
      outputs:
      - name: release
      run:
        path: bash
        args:
        - -exc
        - |
          cat <<EOF > resource_metadata.json
          {
            "type": "git",
            "version": "$(cat version/number)",
            "privileged": false,
            "unique_version_history": false
          }
          EOF

          version="$(cat version/number)"
          echo "v${version}" > release/name

          pushd resource-image-dev-alpine-rootfs
            cp ../resource_metadata.json .
            tar -czf rootfs.tgz -C rootfs .
            tar -czf ../release/git-resource-${version}-alpine.tgz rootfs.tgz resource_metadata.json
          popd

          pushd resource-image-dev-ubuntu-rootfs
            cp ../resource_metadata.json .
            tar -czf rootfs.tgz -C rootfs .
            tar -czf ../release/git-resource-${version}-ubuntu.tgz rootfs.tgz resource_metadata.json
          popd
  - task: build-release-notes
    file: ci/tasks/build-release-notes.yml
    params:
      GITHUB_OWNER: concourse
      GITHUB_REPO: git-resource
      GITHUB_TOKEN: ((concourse_github_dummy.access_token))
      GITHUB_BRANCH: master
    input_mapping:
      repo: resource-repo
  - task: generate-dpkg-list
    image: resource-image-dev-ubuntu-rootfs
    config:
      platform: linux
      inputs:
      - name: version
      outputs:
      - name: dpkg-file
      run:
        path: bash
        args:
        - -exc
        - |
          VERSION="$(cat version/number)"
          RESOURCE="git"
          DPKG_FILE="${RESOURCE}-dpkg-list-${VERSION}.txt"
          dpkg -l > "dpkg-file/${DPKG_FILE}"
  - load_var: version
    file: version/version
  - in_parallel:
    - put: resource-image
      params:
        image: resource-image-dev-alpine/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-image-alpine
      params:
        image: resource-image-dev-alpine/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-image-ubuntu
      params:
        image: resource-image-dev-ubuntu/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-repo-release
      params:
        commitish: resource-repo/.git/ref
        body: built-notes/notes.md
        globs:
        - release/*.tgz
        name: release/name
        tag: version/version
        tag_prefix: v
  - put: dpkg-list-store
    params:
      file: dpkg-file/git-dpkg-list-*.txt
  - put: version
    resource: version
    params:
      file: version/version
- name: publish-minor
  plan:
  - in_parallel:
    - get: resource-repo
      resource: resource-repo
      passed:
      - scan-image
    - get: ci
    - get: release-me
    - get: resource-image-dev-alpine
      resource: resource-image-dev-alpine
      passed:
      - scan-image
      params:
        format: oci
    - get: resource-image-dev-alpine-rootfs
      resource: resource-image-dev-alpine
      passed:
      - scan-image
      params:
        format: rootfs
    - get: resource-image-dev-ubuntu
      resource: resource-image-dev-ubuntu
      passed:
      - scan-image
      params:
        format: oci
    - get: resource-image-dev-ubuntu-rootfs
      resource: resource-image-dev-ubuntu
      passed:
      - scan-image
      params:
        format: rootfs
    - get: version
      resource: version
      params:
        bump: minor
  - task: create-release
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: ubuntu
      inputs:
      - name: version
      - name: resource-image-dev-alpine-rootfs
      - name: resource-image-dev-ubuntu-rootfs
      outputs:
      - name: release
      run:
        path: bash
        args:
        - -exc
        - |
          cat <<EOF > resource_metadata.json
          {
            "type": "git",
            "version": "$(cat version/number)",
            "privileged": false,
            "unique_version_history": false
          }
          EOF

          version="$(cat version/number)"
          echo "v${version}" > release/name

          pushd resource-image-dev-alpine-rootfs
            cp ../resource_metadata.json .
            tar -czf rootfs.tgz -C rootfs .
            tar -czf ../release/git-resource-${version}-alpine.tgz rootfs.tgz resource_metadata.json
          popd

          pushd resource-image-dev-ubuntu-rootfs
            cp ../resource_metadata.json .
            tar -czf rootfs.tgz -C rootfs .
            tar -czf ../release/git-resource-${version}-ubuntu.tgz rootfs.tgz resource_metadata.json
          popd
  - task: build-release-notes
    file: ci/tasks/build-release-notes.yml
    params:
      GITHUB_OWNER: concourse
      GITHUB_REPO: git-resource
      GITHUB_TOKEN: ((concourse_github_dummy.access_token))
      GITHUB_BRANCH: master
    input_mapping:
      repo: resource-repo
  - task: generate-dpkg-list
    image: resource-image-dev-ubuntu-rootfs
    config:
      platform: linux
      inputs:
      - name: version
      outputs:
      - name: dpkg-file
      run:
        path: bash
        args:
        - -exc
        - |
          VERSION="$(cat version/number)"
          RESOURCE="git"
          DPKG_FILE="${RESOURCE}-dpkg-list-${VERSION}.txt"
          dpkg -l > "dpkg-file/${DPKG_FILE}"
  - load_var: version
    file: version/version
  - in_parallel:
    - put: resource-image
      params:
        image: resource-image-dev-alpine/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-image-alpine
      params:
        image: resource-image-dev-alpine/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-image-ubuntu
      params:
        image: resource-image-dev-ubuntu/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-repo-release
      params:
        commitish: resource-repo/.git/ref
        body: built-notes/notes.md
        globs:
        - release/*.tgz
        name: release/name
        tag: version/version
        tag_prefix: v
  - put: dpkg-list-store
    params:
      file: dpkg-file/git-dpkg-list-*.txt
  - put: version
    resource: version
    params:
      file: version/version
- name: publish-patch
  plan:
  - in_parallel:
    - get: resource-repo
      resource: resource-repo
      passed:
      - scan-image
    - get: ci
    - get: release-me
    - get: resource-image-dev-alpine
      resource: resource-image-dev-alpine
      passed:
      - scan-image
      params:
        format: oci
    - get: resource-image-dev-alpine-rootfs
      resource: resource-image-dev-alpine
      passed:
      - scan-image
      params:
        format: rootfs
    - get: resource-image-dev-ubuntu
      resource: resource-image-dev-ubuntu
      passed:
      - scan-image
      params:
        format: oci
    - get: resource-image-dev-ubuntu-rootfs
      resource: resource-image-dev-ubuntu
      passed:
      - scan-image
      params:
        format: rootfs
    - get: version
      resource: version
      params:
        bump: patch
  - task: create-release
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: ubuntu
      inputs:
      - name: version
      - name: resource-image-dev-alpine-rootfs
      - name: resource-image-dev-ubuntu-rootfs
      outputs:
      - name: release
      run:
        path: bash
        args:
        - -exc
        - |
          cat <<EOF > resource_metadata.json
          {
            "type": "git",
            "version": "$(cat version/number)",
            "privileged": false,
            "unique_version_history": false
          }
          EOF

          version="$(cat version/number)"
          echo "v${version}" > release/name

          pushd resource-image-dev-alpine-rootfs
            cp ../resource_metadata.json .
            tar -czf rootfs.tgz -C rootfs .
            tar -czf ../release/git-resource-${version}-alpine.tgz rootfs.tgz resource_metadata.json
          popd

          pushd resource-image-dev-ubuntu-rootfs
            cp ../resource_metadata.json .
            tar -czf rootfs.tgz -C rootfs .
            tar -czf ../release/git-resource-${version}-ubuntu.tgz rootfs.tgz resource_metadata.json
          popd
  - task: build-release-notes
    file: ci/tasks/build-release-notes.yml
    params:
      GITHUB_OWNER: concourse
      GITHUB_REPO: git-resource
      GITHUB_TOKEN: ((concourse_github_dummy.access_token))
      GITHUB_BRANCH: master
    input_mapping:
      repo: resource-repo
  - task: generate-dpkg-list
    image: resource-image-dev-ubuntu-rootfs
    config:
      platform: linux
      inputs:
      - name: version
      outputs:
      - name: dpkg-file
      run:
        path: bash
        args:
        - -exc
        - |
          VERSION="$(cat version/number)"
          RESOURCE="git"
          DPKG_FILE="${RESOURCE}-dpkg-list-${VERSION}.txt"
          dpkg -l > "dpkg-file/${DPKG_FILE}"
  - load_var: version
    file: version/version
  - in_parallel:
    - put: resource-image
      params:
        image: resource-image-dev-alpine/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-image-alpine
      params:
        image: resource-image-dev-alpine/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-image-ubuntu
      params:
        image: resource-image-dev-ubuntu/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-repo-release
      params:
        commitish: resource-repo/.git/ref
        body: built-notes/notes.md
        globs:
        - release/*.tgz
        name: release/name
        tag: version/version
        tag_prefix: v
  - put: dpkg-list-store
    params:
      file: dpkg-file/git-dpkg-list-*.txt
  - put: version
    resource: version
    params:
      file: version/version
- name: publish-patch-lts
  plan:
  - in_parallel:
    - get: resource-repo
      resource: resource-repo-lts
      passed:
      - scan-image-lts
    - get: ci
    - get: release-me
    - get: resource-image-dev-alpine
      resource: resource-image-dev-alpine-lts
      passed:
      - scan-image-lts
      params:
        format: oci
    - get: resource-image-dev-alpine-rootfs
      resource: resource-image-dev-alpine-lts
      passed:
      - scan-image-lts
      params:
        format: rootfs
    - get: resource-image-dev-ubuntu
      resource: resource-image-dev-ubuntu-lts
      passed:
      - scan-image-lts
      params:
        format: oci
    - get: resource-image-dev-ubuntu-rootfs
      resource: resource-image-dev-ubuntu-lts
      passed:
      - scan-image-lts
      params:
        format: rootfs
    - get: version
      resource: version-lts
      params:
        bump: patch
  - task: create-release
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: ubuntu
      inputs:
      - name: version
      - name: resource-image-dev-alpine-rootfs
      - name: resource-image-dev-ubuntu-rootfs
      outputs:
      - name: release
      run:
        path: bash
        args:
        - -exc
        - |
          cat <<EOF > resource_metadata.json
          {
            "type": "git",
            "version": "$(cat version/number)",
            "privileged": false,
            "unique_version_history": false
          }
          EOF

          version="$(cat version/number)"
          echo "v${version}" > release/name

          pushd resource-image-dev-alpine-rootfs
            cp ../resource_metadata.json .
            tar -czf rootfs.tgz -C rootfs .
            tar -czf ../release/git-resource-${version}-alpine.tgz rootfs.tgz resource_metadata.json
          popd

          pushd resource-image-dev-ubuntu-rootfs
            cp ../resource_metadata.json .
            tar -czf rootfs.tgz -C rootfs .
            tar -czf ../release/git-resource-${version}-ubuntu.tgz rootfs.tgz resource_metadata.json
          popd
  - task: build-release-notes
    file: ci/tasks/build-release-notes.yml
    params:
      GITHUB_OWNER: concourse
      GITHUB_REPO: git-resource
      GITHUB_TOKEN: ((concourse_github_dummy.access_token))
      GITHUB_BRANCH: master
    input_mapping:
      repo: resource-repo
  - task: generate-dpkg-list
    image: resource-image-dev-ubuntu-rootfs
    config:
      platform: linux
      inputs:
      - name: version
      outputs:
      - name: dpkg-file
      run:
        path: bash
        args:
        - -exc
        - |
          VERSION="$(cat version/number)"
          RESOURCE="git"
          DPKG_FILE="${RESOURCE}-dpkg-list-${VERSION}.txt"
          dpkg -l > "dpkg-file/${DPKG_FILE}"
  - load_var: version
    file: version/version
  - in_parallel:
    - put: resource-image
      params:
        image: resource-image-dev-alpine/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-image-alpine
      params:
        image: resource-image-dev-alpine/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-image-ubuntu
      params:
        image: resource-image-dev-ubuntu/image.tar
        version: ((.:version))
        bump_aliases: true
    - put: resource-repo-release
      params:
        commitish: resource-repo/.git/ref
        body: built-notes/notes.md
        globs:
        - release/*.tgz
        name: release/name
        tag: version/version
        tag_prefix: v
  - put: dpkg-list-store
    params:
      file: dpkg-file/git-dpkg-list-*.txt
  - put: version
    resource: version-lts
    params:
      file: version/version
- name: republish-images-alpine
  on_failure:
    put: notify
    params:
      mode: normal
      alert_type: failed
  plan:
  - in_parallel:
    - get: daily-trigger
      trigger: true
    - get: git-resource
      resource: resource-repo-tags
    - get: alpine
      trigger: true
      params:
        format: oci
    - get: golang-builder
      params:
        format: oci
    - get: oci-build-task
    - get: version
    - get: ci
  - load_var: version
    file: version/version
  - task: build
    privileged: true
    image: oci-build-task
    config:
      platform: linux
      inputs:
      - name: git-resource
      - name: alpine
      - name: golang-builder
      outputs:
      - name: built-resource-image
        path: image
      params:
        DOCKERFILE: git-resource/dockerfiles/alpine/Dockerfile
        ADDITIONAL_TARGETS: tests
        IMAGE_ARG_base_image: alpine/image.tar
        IMAGE_ARG_builder_image: golang-builder/image.tar
        CONTEXT: git-resource
      run:
        path: build
  - task: alpine-date-tag
    image: oci-build-task
    file: ci/tasks/tag-version-with-date.yml
    params:
      VERSION: ((.:version))-alpine
  - in_parallel:
    - put: resource-image-alpine
      params:
        image: built-resource-image/image.tar
        version: ((.:version))
        bump_aliases: true
        additional_tags: date-tag/tag
    - put: resource-image
      params:
        image: built-resource-image/image.tar
        version: ((.:version))
        bump_aliases: true
- name: republish-images-ubuntu
  on_failure:
    put: notify
    params:
      mode: normal
      alert_type: failed
  plan:
  - in_parallel:
    - get: daily-trigger
      trigger: true
    - get: git-resource
      resource: resource-repo-tags
    - get: ubuntu-bionic
      trigger: true
      params:
        format: oci
    - get: golang-builder
      params:
        format: oci
    - get: oci-build-task
    - get: version
    - get: ci
  - load_var: version
    file: version/version
  - task: build
    privileged: true
    image: oci-build-task
    config:
      platform: linux
      inputs:
      - name: git-resource
      - name: ubuntu-bionic
      - name: golang-builder
      outputs:
      - name: built-resource-image
        path: image
      params:
        DOCKERFILE: git-resource/dockerfiles/ubuntu/Dockerfile
        ADDITIONAL_TARGETS: tests
        IMAGE_ARG_base_image: ubuntu-bionic/image.tar
        IMAGE_ARG_builder_image: golang-builder/image.tar
        CONTEXT: git-resource
      run:
        path: build
  - task: ubuntu-date-tag
    image: oci-build-task
    file: ci/tasks/tag-version-with-date.yml
    params:
      VERSION: ((.:version))-ubuntu
  - in_parallel:
    - put: resource-image-ubuntu
      params:
        image: built-resource-image/image.tar
        version: ((.:version))
        bump_aliases: true
        additional_tags: date-tag/tag
resource_types:
- name: pull-request
  type: registry-image
  check_every: 2m
  source:
    repository: teliaoss/github-pr-resource
- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource
- name: slack-notifier
  type: registry-image
  source:
    repository: aoldershaw/concourse-slack-notifier
resources:
- name: alpine
  type: registry-image
  icon: docker
  source:
    repository: alpine
    tag: latest
    username: ((docker.username))
    password: ((docker.password))
- name: ubuntu-bionic
  type: registry-image
  icon: docker
  source:
    repository: ubuntu
    tag: bionic
    username: ((docker.username))
    password: ((docker.password))
- name: golang-builder
  type: registry-image
  icon: docker
  source:
    repository: concourse/golang-builder
    variant: bionic
    username: ((docker.username))
    password: ((docker.password))
- name: trivy
  type: registry-image
  icon: docker
  source:
    repository: aquasec/trivy
    username: ((docker.username))
    password: ((docker.password))
- name: trivy-db
  type: github-release
  icon: database
  source:
    owner: aquasecurity
    repository: trivy-db
    access_token: ((concourse_github_dummy.access_token))
- name: resource-repo
  type: git
  icon: github
  source:
    branch: master
    private_key: ((concourse_bot_private_key))
    uri: git@github.com:concourse/git-resource
- name: resource-repo-lts
  type: git
  icon: github
  source:
    branch: release/6.7.x
    private_key: ((concourse_bot_private_key))
    uri: git@github.com:concourse/git-resource
- name: resource-repo-tags
  type: git
  icon: github
  source:
    branch: master
    private_key: ((concourse_bot_private_key))
    uri: git@github.com:concourse/git-resource
    tag_filter: v*
- name: resource-repo-release
  type: github-release
  icon: package-variant-closed
  source:
    access_token: ((concourse_bot_access_token))
    owner: concourse
    repository: git-resource
- name: version
  type: semver
  icon: tag
  source:
    branch: version
    driver: git
    file: version
    private_key: ((concourse_bot_private_key))
    uri: git@github.com:concourse/git-resource
- name: version-lts
  type: semver
  icon: tag
  source:
    branch: version-lts
    driver: git
    file: version
    private_key: ((concourse_bot_private_key))
    uri: git@github.com:concourse/git-resource
- name: resource-pr
  type: pull-request
  icon: source-pull
  check_every: 2m
  source:
    access_token: ((pull_requests_access_token))
    base_branch: master
    repository: concourse/git-resource
- name: resource-image
  type: registry-image
  icon: docker
  source:
    repository: concourse/git-resource
    username: ((docker.username))
    password: ((docker.password))
- name: resource-image-alpine
  type: registry-image
  icon: docker
  source:
    repository: concourse/git-resource
    variant: alpine
    username: ((docker.username))
    password: ((docker.password))
- name: resource-image-ubuntu
  type: registry-image
  icon: docker
  source:
    repository: concourse/git-resource
    variant: ubuntu
    username: ((docker.username))
    password: ((docker.password))
- name: resource-image-dev-alpine
  type: registry-image
  icon: docker
  source:
    repository: concourse/git-resource
    tag: dev
    password: ((docker.password))
    username: ((docker.username))
- name: resource-image-dev-ubuntu
  type: registry-image
  icon: docker
  source:
    password: ((docker.password))
    repository: concourse/git-resource
    tag: dev-ubuntu
    username: ((docker.username))
- name: resource-image-dev-alpine-lts
  type: registry-image
  icon: docker
  source:
    repository: concourse/git-resource
    tag: dev-lts
    password: ((docker.password))
    username: ((docker.username))
- name: resource-image-dev-ubuntu-lts
  type: registry-image
  icon: docker
  source:
    password: ((docker.password))
    repository: concourse/git-resource
    tag: dev-ubuntu-lts
    username: ((docker.username))
- name: dpkg-list-store
  type: gcs
  source:
    bucket: concourse-ubuntu-dpkg-list
    json_key: ((concourse_dpkg_list_json_key))
    regexp: git-dpkg-list-(.*).txt
- name: ci
  type: git
  icon: github
  source:
    uri: https://github.com/concourse/ci.git
    branch: master
- name: release-me
  type: github-release
  icon: package-down
  source:
    owner: clarafu
    repository: release-me
    access_token: ((concourse_github_dummy.access_token))
- name: oci-build-task
  type: registry-image
  icon: docker
  source:
    repository: vito/oci-build-task
- name: notify
  type: slack-notifier
  icon: slack
  source:
    url: ((slack_hook))
    username: ((basic_auth.username))
    password: ((basic_auth.password))
    concourse_url: https://ci.concourse-ci.org
- name: daily-trigger
  type: time
  source:
    start: 1AM
    stop: 2AM

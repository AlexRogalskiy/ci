#!/bin/bash

set -e -u

outputs=$PWD/outputs

deployment_path=ci/deployments/smoke

if [ -d linux-rc ]; then
  cp linux-rc/concourse-*.tgz $deployment_path/concourse.tgz
fi

# takes 2 semver of form x.y.z[-rc.123] and returns
# 0: =
# 1: <
# 2: >
cmp() {
  # strip pre-release (-rc) or build (+123) from semver
  v1=$(echo $1 | sed -e 's/[-+].*$//g')
  v2=$(echo $2 | sed -e 's/[-+].*$//g')

  if [[ $v1 == $v2 ]]; then
    echo "0"
    return
  fi

  # use the magic of sort to figure out which version is smaller
  smaller=$(echo -e "$v1\n$v2" | sort -t "." -k 1,1 -k 2,2 -k 3,3 -g | head -n1)
  if [[ $smaller == $v1 ]]; then
    echo "1"
    return
  fi
  echo "2"
}

cd $deployment_path

echo "$GCP_KEY" > keys/gcp.json

echo "$SSH_KEY" > keys/id_rsa
chmod 0600 keys/id_rsa
ssh-keygen -y -f keys/id_rsa > keys/id_rsa.pub

if [[ $CONCOURSE_VERSION != "dev" ]]; then
  res=$(cmp $CONCOURSE_VERSION "6.5.0")
  case $res in  # <
    1) TF_VAR_HAS_RUNTIME_FLAG="false";;
  esac
fi

terraform init

terraform workspace select "$WORKSPACE" || \
  terraform workspace new "$WORKSPACE"

if [ -d packer-image ]; then
  image_var="-var image=$(cat 'packer-image/image-name')"
fi

terraform apply \
  --auto-approve \
  --var project=$GCP_PROJECT \
  --var use_https=$USE_HTTPS \
  ${image_var:-}

{
  terraform output -json | \
    jq -r 'keys[] as $k | "\($k) \(.[$k].value)"'
} | while read name value; do
  echo "$value" > $outputs/$name
done
